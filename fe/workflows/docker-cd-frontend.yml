name: Frontend Docker CD

on:
  workflow_run:
    workflows: ["Frontend Docker CI"]
    types:
      - completed
    branches:
      - main
      - develop

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: Checkout codedeploy files
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            codedeploy/

      - name: Set environment variables
        run: |
          BRANCH="${{ github.event.workflow_run.head_branch }}"
          SHORT_SHA=$(echo "${{ github.event.workflow_run.head_sha }}" | cut -c1-7)
          IMAGE_TAG="${BRANCH}-${SHORT_SHA}"

          if [[ "$BRANCH" == "main" ]]; then
            echo "ENV=production" >> $GITHUB_ENV
            echo "APPLICATION_NAME=${{ secrets.PROD_FRONTEND_APPLICATION_NAME }}" >> $GITHUB_ENV
            echo "DEPLOYMENT_GROUP_NAME=${{ secrets.PROD_FRONTEND_DEPLOY_GROUP_NAME }}" >> $GITHUB_ENV
          else
            echo "ENV=develop" >> $GITHUB_ENV
            echo "APPLICATION_NAME=${{ secrets.DEV_FRONTEND_APPLICATION_NAME }}" >> $GITHUB_ENV
            echo "DEPLOYMENT_GROUP_NAME=${{ secrets.DEV_FRONTEND_DEPLOY_GROUP_NAME }}" >> $GITHUB_ENV
          fi

          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "S3_BUCKET=${{ secrets.CODEDEPLOY_BUCKET }}" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Prepare deployment bundle
        run: |
          echo "🔧 환경 변수 주입 중..."

          # .env 파일 생성
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" > codedeploy/.env
          echo "AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}" >> codedeploy/.env
          echo "IMAGE_TAG=${{ env.IMAGE_TAG }}" >> codedeploy/.env

      - name: Zip and upload to S3
        run: |
          zip -r codedeploy_bundle.zip codedeploy/
          aws s3 cp codedeploy_bundle.zip s3://$S3_BUCKET/frontend/$IMAGE_TAG/codedeploy_bundle.zip

      - name: Trigger CodeDeploy
        run: |
          aws deploy create-deployment \
            --application-name "$APPLICATION_NAME" \
            --deployment-group-name "$DEPLOYMENT_GROUP_NAME" \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --s3-location bucket=$S3_BUCKET,bundleType=zip,key=frontend/$IMAGE_TAG/codedeploy_bundle.zip \
            --file-exists-behavior OVERWRITE

      - name: Send success notification
        if: success()
        run: |
          curl -H "Content-Type: application/json" \
              -X POST \
              -d "{\"content\": \"✅ [Frontend CD 성공] **${{ env.ENV }}** 환경 배포 완료\\n🔖 이미지: hertz-fe:${{ env.IMAGE_TAG }}\"}" \
              ${{ secrets.DISCORD_WEBHOOK_CICD_URL }}

      - name: Send failure notification
        if: failure()
        run: |
          WORKFLOW_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          curl -H "Content-Type: application/json" \
              -X POST \
              -d "{\"content\": \"❌ [Frontend CD 실패] **${{ env.ENV }}** 환경 배포 실패\\n🔖 이미지: hertz-fe:${{ env.IMAGE_TAG }}\\n⚠️ 오류 발생\\n🔗 [워크플로우 로그 보기]($WORKFLOW_URL)\"}" \
              ${{ secrets.DISCORD_WEBHOOK_CICD_URL }}