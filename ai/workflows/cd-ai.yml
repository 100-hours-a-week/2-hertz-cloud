name: AI CD

on:
  workflow_run:
    workflows: ['AI CI'] # 정확히 CI 워크플로우 이름과 일치해야 함
    types:
      - completed
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy (main or develop)'
        required: true
        default: "develop"
        type: choice
        options:
          - "main"
          - "develop"

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Set environment
        run: |
          BRANCH="${{ github.ref_name }}"
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
          echo "ZONE=${{ secrets.GCP_ZONE }}" >> $GITHUB_ENV

          if [[ "$BRANCH" == "main" ]]; then
            echo "ENV=production" >> $GITHUB_ENV
            echo "HOST=${{ secrets.PROD_GCP_HOST_AI }}" >> $GITHUB_ENV
            echo "INSTANCE=${{ secrets.PROD_GCP_INSTANCE_AI }}" >> $GITHUB_ENV
            echo "PROJECT_ID=${{ secrets.PROD_GCP_PROJECT_ID }}" >> $GITHUB_ENV
          else
            echo "ENV=develop" >> $GITHUB_ENV
            echo "HOST=${{ secrets.DEV_GCP_HOST_AI }}" >> $GITHUB_ENV
            echo "INSTANCE=${{ secrets.DEV_GCP_INSTANCE_AI }}" >> $GITHUB_ENV
            echo "PROJECT_ID=${{ secrets.DEV_GCP_PROJECT_ID }}" >> $GITHUB_ENV
          fi

          echo "COMMIT_HASH=${{ github.sha }}" >> $GITHUB_ENV

      - name: Authenticate to GCP
        if: github.ref_name == 'main'
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.PROD_GCP_SA_KEY }}

      - name: Authenticate to GCP (DEV)
        if: github.ref_name != 'main'
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.DEV_GCP_SA_KEY }}

      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v1

      - name: Boot target instance (start/resume with conditional wait)
        run: |
          echo "⚡ 인스턴스 상태 확인 중: $INSTANCE (zone: $ZONE)"
          STATUS=$(gcloud compute instances describe "$INSTANCE" --zone="$ZONE" --format='get(status)')
          echo "🔎 현재 상태: $STATUS"

          if [[ "$STATUS" == "SUSPENDED" ]]; then
            echo "🔄 'resume' 명령 실행"
            gcloud compute instances resume "$INSTANCE" --zone="$ZONE"
            echo "⏳ 상태 변경 후 30초 대기..."
            sleep 30
          elif [[ "$STATUS" == "TERMINATED" ]]; then
            echo "🔄 'start' 명령 실행"
            gcloud compute instances start "$INSTANCE" --zone="$ZONE"
            echo "⏳ 상태 변경 후 30초 대기..."
            sleep 30
          else
            echo "✅ 이미 실행 중 - 대기 생략"
          fi

      - name: Deploy via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /home/deploy
            chmod +x ai_deploy.sh
            ./ai_deploy.sh

      - name: Wait for FastAPI to start
        run: |
          echo "🕒 FastAPI 서버 기동 대기 중..."
          sleep 15

      - name: Health check with retries
        run: |
          echo "🔍 AI 서버 헬스체크 시작 (FastAPI api/v1/health/chromadb)... 최대 3회 시도합니다."
          for i in {1..3}; do
            echo "⏱️ 시도 $i: http://${{ env.HOST }}:8000/api/v1/health/chromadb"
            if curl -sf http://${{ env.HOST }}:8000/api/v1/health/chromadb; then
              echo "✅ 헬스체크 성공 🎉"
              exit 0
            else
              echo "⚠️ 헬스체크 실패. 15초 후 재시도..."
              sleep 15
            fi
          done

          echo "::error::❌ 3회 헬스체크 실패 - 서버가 정상 기동되지 않음"
          exit 1

      - name: Send failure notification
        if: failure()
        run: |
          WORKFLOW_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          curl -H "Content-Type: application/json" \
              -X POST \
              -d "{\"content\": \"❌ [AI 배포 실패] **${{ env.ENV }}** AI 서버 (브랜치: \`${{ env.BRANCH }}\`)\\n🔖 Commit: ${{ env.COMMIT_HASH }}\\n⚠️ [워크플로우 로그 보기]($WORKFLOW_URL)\"}" \
              ${{ secrets.DISCORD_WEBHOOK_PR_URL }}

      - name: Send success notification
        if: success()
        run: |
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{\"content\": \"🚀 [AI 배포 완료] **${{ env.ENV }}** AI 서버 (브랜치: \`${{ env.BRANCH }}\`)\\n🔖 Commit: ${{ env.COMMIT_HASH }}\"}" \
               ${{ secrets.DISCORD_WEBHOOK_PR_URL }}

  rollback-production:
    needs: deploy
    if: ${{ needs.deploy.result == 'failure' && github.ref_name == 'main' }}
    uses: 100-hours-a-week/2-hertz-ai/.github/workflows/rollback-ai.yml@main
    with:
      environment: production

  rollback-develop:
    needs: deploy
    if: ${{ needs.deploy.result == 'failure' && github.ref_name == 'develop' }}
    uses: 100-hours-a-week/2-hertz-ai/.github/workflows/rollback-ai.yml@develop
    with:
      environment: develop



