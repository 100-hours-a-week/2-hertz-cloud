name: AI Docker CI

on:
   pull_request:
     types: [closed] # PR이 닫혔을 때 (병합 포함)
     branches:
       - main # main 브랜치로 Merge 시 -> Production 환경에 배포
       - develop # develop 브랜치로 Merge 시 -> DEV 환경에 배포

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true  # PR이 merge된 경우에만 실행

    steps:
    # 1. 소스 코드 체크아웃
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 1

    # 2. Python 설정
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
        cache-dependency-path: |
          requirements.txt

    # 3. 의존성 설치
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install -r app-tuning/requirements.txt

    # 4. 테스트 실행
    - name: Run tests
      run: |
        pytest || echo "⚠️ 테스트 없음 또는 실패, 계속 진행"

    # 5. AWS 인증
    - name: Configure AWS credentials
      if: success()
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # 6. ECR 로그인
    - name: Login to Amazon ECR
      if: success()
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # 7. 태그 정보 생성
    - name: Generate tags
      if: success()
      id: generate-tags
      run: |
        # PR이 merge된 대상 브랜치명 가져오기
        BRANCH=${{ github.base_ref }}
        
        # 짧은 커밋 해시 (7자리) 생성
        SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
        
        # 태그 형식: [브랜치명]-[짧은 커밋 해시]
        IMAGE_TAG="${BRANCH}-${SHORT_SHA}"
        
        # latest 태그용 환경 설정
        if [ "$BRANCH" = "main" ]; then
          ENV_TAG="main-latest"
        else
          ENV_TAG="develop-latest"
        fi
        
        echo "BRANCH=$BRANCH" >> $GITHUB_ENV
        echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
        echo "ENV_TAG=$ENV_TAG" >> $GITHUB_ENV

    # 8. Docker 이미지 빌드 및 푸시
    - name: Build and push Docker image
      if: success()
      run: |
        ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
        REPOSITORY=tuning-api
        
        echo "🏗️ Docker 이미지 빌드 시작..."
        
        # Docker 빌드
        docker build -t $ECR_REGISTRY/$REPOSITORY:${{ env.IMAGE_TAG }} .
        docker tag $ECR_REGISTRY/$REPOSITORY:${{ env.IMAGE_TAG }} $ECR_REGISTRY/$REPOSITORY:${{ env.ENV_TAG }}
        
        # Docker 푸시
        echo "📤 Docker 이미지 푸시 중..."
        docker push $ECR_REGISTRY/$REPOSITORY:${{ env.IMAGE_TAG }}
        docker push $ECR_REGISTRY/$REPOSITORY:${{ env.ENV_TAG }}
        
        # 배포에 필요한 정보 저장
        echo "ECR_REGISTRY=$ECR_REGISTRY" >> $GITHUB_ENV
        echo "REPOSITORY=$REPOSITORY" >> $GITHUB_ENV
        echo "FULL_IMAGE=$ECR_REGISTRY/$REPOSITORY:${{ env.IMAGE_TAG }}" >> $GITHUB_ENV

    # 9. Discord 알림
    - name: Send success notification
      if: success()
      run: |
        curl -H "Content-Type: application/json" \
             -X POST \
             -d "{\"username\": \"AI CI\", \"content\": \"✅ [AI CI 성공] **${{ env.BRANCH }}** 브랜치\\n🔖 태그: ${{ env.IMAGE_TAG }}\\n🆔 Commit: ${{ env.SHORT_SHA }}\\n📦 이미지: ${{ env.FULL_IMAGE }}\"}" \
             ${{ secrets.DISCORD_WEBHOOK_URL }}

    - name: Send failure notification
      if: failure()
      run: |
        curl -H "Content-Type: application/json" \
             -X POST \
             -d "{\"username\": \"AI CI\", \"content\": \"❌ [AI CI 실패] **${{ github.base_ref }}** 브랜치\\n🔖 Commit: ${{ github.sha }}\\n⚠️ 원인: 빌드 또는 테스트 실패\"}" \
             ${{ secrets.DISCORD_WEBHOOK_URL }}