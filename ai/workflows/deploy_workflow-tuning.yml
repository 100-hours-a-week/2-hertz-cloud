# .github/workflows/fastapi-ai-ci.yml
name: AI CI/CD
on:
  pull_request:
    types: [closed]
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy (main or develop)'
        required: true
        default: "develop"
        type: choice
        options:
          - "main"
          - "develop"

jobs:
  ai-ci:
    runs-on: ubuntu-latest
    # workflow_dispatch 이벤트 또는 PR이 머지된 경우만 실행
    if: github.event_name == 'workflow_dispatch' || github.event.pull_request.merged == true
    
    steps:
    # 1. 소스 코드 체크아웃
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 1

    # 2. Python 3.10 설치 및 캐시 설정
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
        cache-dependency-path: |
          requirements.txt
         
    # 3. 가상환경 생성 및 활성화
    - name: Create and activate virtual environment
      run: |
        python -m venv venv
        source venv/bin/activate

    # 4. 의존성 설치 (병렬 처리 및 캐시 활용)
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install -r app-tuning/requirements.txt


    - name: Launch FastAPI server in background
      run: |
        nohup uvicorn main:app --app-dir app-tuning --host 127.0.0.1 --port 8000 > uvicorn.log 2>&1 &
        sleep 15  # 서버 기동 대기

    - name: Health check with retries
      run: |
        echo "🔍 FastAPI 서버 헬스체크 시작 ... 최대 3회 시도합니다."
        for i in {1..3}; do
          echo "⏱️ 시도 $i: curl -f http://127.0.0.1:8000/docs"
          if curl -f http://127.0.0.1:8000/docs; then
            echo "✅ 헬스체크 성공 🎉"
            exit 0
          else
            echo "⚠️ 헬스체크 실패. 5초 후 재시도..."
            sleep 5
          fi
        done
        echo "❌ 서버 실행 실패. 로그 출력:"
        cat uvicorn.log
        exit 1


    # 5. Discord 알림
    - name: Send success notification
      if: success()
      run: |
        curl -H "Content-Type: application/json" \
             -X POST \
             -d "{\"username\": \"AI CI\", \"content\": \"✅ [AI CI 성공] **${{ github.base_ref }}** AI 서버 (브랜치: \`${{ github.head_ref }}\`)\\n🔖 Commit: ${{ github.sha }}\"}" \
             ${{ secrets.DISCORD_WEBHOOK_PR_URL }}

    - name: Send failure notification
      if: failure()
      run: |
        WORKFLOW_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        curl -H "Content-Type: application/json" \
             -X POST \
             -d "{\"username\": \"AI CI\", \"content\": \"❌ [AI CI 실패] **${{ github.base_ref }}** AI 서버 (브랜치: \`${{ github.head_ref }}\`)\\n🔖 Commit: ${{ github.sha }}\\n⚠️ [워크플로우 로그 보기]($WORKFLOW_URL)\"}" \
             ${{ secrets.DISCORD_WEBHOOK_PR_URL }}

  ai-cd:
    needs: ai-ci  # ai-ci 작업이 성공해야 실행됨
    runs-on: ubuntu-latest
    steps:
      - name: Set environment
        run: |
          BRANCH="${{ github.ref_name }}"
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
          echo "ZONE=${{ secrets.GCP_ZONE }}" >> $GITHUB_ENV

          if [[ "$BRANCH" == "main" ]]; then
            echo "ENV=production" >> $GITHUB_ENV
            echo "HOST=${{ secrets.PROD_GCP_HOST_AI }}" >> $GITHUB_ENV
            echo "INSTANCE=${{ secrets.PROD_GCP_INSTANCE_AI }}" >> $GITHUB_ENV
            echo "PROJECT_ID=${{ secrets.PROD_GCP_PROJECT_ID }}" >> $GITHUB_ENV
          else
            echo "ENV=develop" >> $GITHUB_ENV
            echo "HOST=${{ secrets.DEV_GCP_HOST_AI }}" >> $GITHUB_ENV
            echo "INSTANCE=${{ secrets.DEV_GCP_INSTANCE_AI }}" >> $GITHUB_ENV
            echo "PROJECT_ID=${{ secrets.DEV_GCP_PROJECT_ID }}" >> $GITHUB_ENV
          fi

          echo "COMMIT_HASH=${{ github.sha }}" >> $GITHUB_ENV

      - name: Authenticate to GCP
        if: env.ENV == 'production'
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.PROD_GCP_SA_KEY }}

      - name: Authenticate to GCP (DEV)
        if: env.ENV == 'develop'
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.DEV_GCP_SA_KEY }}

      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v1

      - name: Boot target instance (start/resume with conditional wait)
        run: |
          echo "⚡ 인스턴스 상태 확인 중: $INSTANCE (zone: $ZONE)"
          STATUS=$(gcloud compute instances describe "$INSTANCE" --zone="$ZONE" --format='get(status)')
          echo "🔎 현재 상태: $STATUS"

          if [[ "$STATUS" == "SUSPENDED" ]]; then
            echo "🔄 'resume' 명령 실행"
            gcloud compute instances resume "$INSTANCE" --zone="$ZONE"
            echo "⏳ 상태 변경 후 30초 대기..."
            sleep 30
          elif [[ "$STATUS" == "TERMINATED" ]]; then
            echo "🔄 'start' 명령 실행"
            gcloud compute instances start "$INSTANCE" --zone="$ZONE"
            echo "⏳ 상태 변경 후 30초 대기..."
            sleep 30
          else
            echo "✅ 이미 실행 중 - 대기 생략"
          fi

      - name: Deploy via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /home/deploy
            chmod +x ai_deploy.sh
            ./ai_deploy.sh

      - name: Wait for FastAPI to start
        run: |
          echo "🕒 FastAPI 서버 기동 대기 중..."
          sleep 15

      - name: Health check with retries
        run: |
          echo "🔍 AI 서버 헬스체크 시작 (FastAPI api/v1/health/chromadb)... 최대 3회 시도합니다."
          for i in {1..3}; do
            echo "⏱️ 시도 $i: http://${{ env.HOST }}:8000/api/v1/health/chromadb"
            if curl -sf http://${{ env.HOST }}:8000/api/v1/health/chromadb; then
              echo "✅ 헬스체크 성공 🎉"
              exit 0
            else
              echo "⚠️ 헬스체크 실패. 10초 후 재시도..."
              sleep 10
            fi
          done

          echo "::error::❌ 3회 헬스체크 실패 - 서버가 정상 기동되지 않음"
          exit 1

      - name: Send failure notification
        if: failure()
        run: |
          WORKFLOW_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          curl -H "Content-Type: application/json" \
              -X POST \
              -d "{\"content\": \"❌ [AI 배포 실패] **${{ env.ENV }}** AI 서버 (브랜치: \`${{ env.BRANCH }}\`)\\n🔖 Commit: ${{ env.COMMIT_HASH }}\\n⚠️ [워크플로우 로그 보기]($WORKFLOW_URL)\"}" \
              ${{ secrets.DISCORD_WEBHOOK_PR_URL }}

      - name: Send success notification
        if: success()
        run: |
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{\"content\": \"🚀 [AI 배포 완료] **${{ env.ENV }}** AI 서버 (브랜치: \`${{ env.BRANCH }}\`)\\n🔖 Commit: ${{ env.COMMIT_HASH }}\"}" \
               ${{ secrets.DISCORD_WEBHOOK_PR_URL }}
  
  rollback:
    needs: ai-cd
    if: always() && needs.ai-cd.result != 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Set environment variables
        run: |
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
            echo "HOST=${{ secrets.PROD_GCP_HOST_AI }}" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=develop" >> $GITHUB_ENV
            echo "HOST=${{ secrets.DEV_GCP_HOST_AI }}" >> $GITHUB_ENV
          fi

      - name: Authenticate to GCP
        if: env.ENVIRONMENT == 'production'
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.PROD_GCP_SA_KEY }}

      - name: Authenticate to GCP (Develop)
        if: env.ENVIRONMENT == 'develop'
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.DEV_GCP_SA_KEY }}

      - name: Send rollback start notification
        run: |
          curl -H "Content-Type: application/json" \
            -X POST \
            -d "{\"content\": \"🔄 [AI 롤백 시작] \`${{ env.ENVIRONMENT }}\` 환경에서 롤백을 실행합니다.\"}" \
            ${{ secrets.DISCORD_WEBHOOK_PR_URL }}

      - name: SSH into server and rollback
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /home/deploy
            ./ai_deploy.sh --rollback || exit 1

      - name: Health check with retries
        run: |
          echo "🔍 AI 서버 헬스체크 시작 ... 최대 3회 시도합니다."
          for i in {1..3}; do
            echo "⏱️ 시도 $i: http://${{ env.HOST }}:8000/api/v1/health/chromadb"
            if curl -sf http://${{ env.HOST }}:8000/api/v1/health/chromadb; then
              echo "✅ 헬스체크 성공 🎉"
              exit 0
            else
              echo "⚠️ 헬스체크 실패. 10초 후 재시도..."
              sleep 10
            fi
          done

          echo "::error::❌ 3회 헬스체크 실패 - 서버가 정상 기동되지 않음"
          exit 1

      - name: Send success notification
        if: success()
        run: |
          curl -H "Content-Type: application/json" \
            -X POST \
            -d "{\"content\": \"✅ [AI 롤백 완료] \`${{ env.ENVIRONMENT }}\` 환경\"}" \
            ${{ secrets.DISCORD_WEBHOOK_PR_URL }}

      - name: Send failure notification
        if: failure()
        run: |
          curl -H "Content-Type: application/json" \
            -X POST \
            -d "{\"content\": \"❌ [AI 롤백 실패] \`${{ env.ENVIRONMENT }}\` 환경\"}" \
            ${{ secrets.DISCORD_WEBHOOK_PR_URL }}