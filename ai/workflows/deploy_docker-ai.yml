name: AI Docker CI/CD

on:
  pull_request:
    types: [closed] # PR이 닫혔을 때 (병합 포함)
    branches:
      - main # main 브랜치로 Merge 시 -> Production 환경에 배포
      - develop # develop 브랜치로 Merge 시 -> DEV 환경에 배포

jobs:
  # CI 작업: 테스트 및 이미지 빌드
  ci:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true  # PR이 merge된 경우에만 실행
    outputs:
      branch: ${{ env.BRANCH }}
      image_tag: ${{ env.IMAGE_TAG }}
      env_tag: ${{ env.ENV_TAG }}
      full_image: ${{ env.FULL_IMAGE }}
      short_sha: ${{ env.SHORT_SHA }}

    steps:
    # 1. 소스 코드 체크아웃
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 1

    # 2. Python 설정
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
        cache-dependency-path: |
          requirements.txt

    # 3. 의존성 설치
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt

    # 4. 테스트 실행
    - name: Run tests
      run: |
        pytest || echo "⚠️ 테스트 없음 또는 실패, 계속 진행"

    # 5. AWS 인증
    - name: Configure AWS credentials
      if: success()
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # 6. ECR 로그인
    - name: Login to Amazon ECR
      if: success()
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # 7. 태그 정보 생성
    - name: Generate tags
      if: success()
      id: generate-tags
      run: |
        # PR이 merge된 대상 브랜치명 가져오기
        BRANCH=${{ github.base_ref }}
        
        # 짧은 커밋 해시 (7자리) 생성
        SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
        
        # 태그 형식: [브랜치명]-[짧은 커밋 해시]
        IMAGE_TAG="${BRANCH}-${SHORT_SHA}"
        
        # latest 태그용 환경 설정
        if [ "$BRANCH" = "main" ]; then
          ENV_TAG="main-latest"
        else
          ENV_TAG="develop-latest"
        fi
        
        echo "BRANCH=$BRANCH" >> $GITHUB_ENV
        echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
        echo "ENV_TAG=$ENV_TAG" >> $GITHUB_ENV

    # 8. Docker 이미지 빌드 및 푸시
    - name: Build and push Docker image
      if: success()
      run: |
        ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
        REPOSITORY=tuning-api
        
        echo "🏗️ Docker 이미지 빌드 시작..."
        
        # Docker 빌드
        docker build -t $ECR_REGISTRY/$REPOSITORY:${{ env.IMAGE_TAG }} .
        docker tag $ECR_REGISTRY/$REPOSITORY:${{ env.IMAGE_TAG }} $ECR_REGISTRY/$REPOSITORY:${{ env.ENV_TAG }}
        
        # Docker 푸시
        echo "📤 Docker 이미지 푸시 중..."
        docker push $ECR_REGISTRY/$REPOSITORY:${{ env.IMAGE_TAG }}
        docker push $ECR_REGISTRY/$REPOSITORY:${{ env.ENV_TAG }}
        
        # 배포에 필요한 정보 저장
        echo "ECR_REGISTRY=$ECR_REGISTRY" >> $GITHUB_ENV
        echo "REPOSITORY=$REPOSITORY" >> $GITHUB_ENV
        echo "FULL_IMAGE=$ECR_REGISTRY/$REPOSITORY:${{ env.IMAGE_TAG }}" >> $GITHUB_ENV

    # 9. Discord 알림
    - name: Send success notification
      if: success()
      run: |
        curl -H "Content-Type: application/json" \
             -X POST \
             -d "{\"username\": \"AI CI\", \"content\": \"✅ [AI CI 성공] **${{ env.BRANCH }}** 브랜치\\n🔖 태그: ${{ env.IMAGE_TAG }}\\n🆔 Commit: ${{ env.SHORT_SHA }}\\n📦 이미지: ${{ env.FULL_IMAGE }}\"}" \
             ${{ secrets.DISCORD_WEBHOOK_URL }}

    - name: Send failure notification
      if: failure()
      run: |
        curl -H "Content-Type: application/json" \
             -X POST \
             -d "{\"username\": \"AI CI\", \"content\": \"❌ [AI CI 실패] **${{ github.base_ref }}** 브랜치\\n🔖 Commit: ${{ github.sha }}\\n⚠️ 원인: 빌드 또는 테스트 실패\"}" \
             ${{ secrets.DISCORD_WEBHOOK_URL }}

  # CD 작업: 배포
  cd:
    needs: ci  # CI 작업이 성공한 후에 실행
    runs-on: ubuntu-latest
    
    steps:
      - name: Set environment variables
        id: set-env
        run: |
          # CI 작업에서 전달받은 값들
          BRANCH="${{ needs.ci.outputs.branch }}"
          IMAGE_TAG="${{ needs.ci.outputs.image_tag }}"
          SHORT_SHA="${{ needs.ci.outputs.short_sha }}"
          
          if [[ "$BRANCH" == "main" ]]; then
            echo "ENV=production" >> $GITHUB_ENV
            echo "HOST=${{ secrets.PROD_GCP_HOST_AI }}" >> $GITHUB_ENV
            echo "INSTANCE=${{ secrets.PROD_GCP_INSTANCE_AI }}" >> $GITHUB_ENV
            echo "PROJECT_ID=${{ secrets.PROD_GCP_PROJECT_ID }}" >> $GITHUB_ENV
            echo "GCP_SA_KEY=${{ secrets.PROD_GCP_SA_KEY }}" >> $GITHUB_ENV
          else
            echo "ENV=develop" >> $GITHUB_ENV
            echo "HOST=${{ secrets.DEV_GCP_HOST_AI }}" >> $GITHUB_ENV
            echo "INSTANCE=${{ secrets.DEV_GCP_INSTANCE_AI }}" >> $GITHUB_ENV
            echo "PROJECT_ID=${{ secrets.DEV_GCP_PROJECT_ID }}" >> $GITHUB_ENV
            echo "GCP_SA_KEY=${{ secrets.DEV_GCP_SA_KEY }}" >> $GITHUB_ENV
          fi
          
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "ZONE=${{ secrets.GCP_ZONE }}" >> $GITHUB_ENV
          echo "FULL_IMAGE=${{ needs.ci.outputs.full_image }}" >> $GITHUB_ENV

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ env.GCP_SA_KEY }}

      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v1

      - name: Boot target instance
        run: |
          echo "⚡ 인스턴스 상태 확인 중: ${{ env.INSTANCE }} (zone: ${{ env.ZONE }})"
          STATUS=$(gcloud compute instances describe "${{ env.INSTANCE }}" --zone="${{ env.ZONE }}" --format='get(status)')
          echo "🔎 현재 상태: $STATUS"

          if [[ "$STATUS" == "SUSPENDED" ]]; then
            echo "🔄 'resume' 명령 실행"
            gcloud compute instances resume "${{ env.INSTANCE }}" --zone="${{ env.ZONE }}"
            echo "⏳ 상태 변경 후 30초 대기..."
            sleep 30
          elif [[ "$STATUS" == "TERMINATED" ]]; then
            echo "🔄 'start' 명령 실행"
            gcloud compute instances start "${{ env.INSTANCE }}" --zone="${{ env.ZONE }}"
            echo "⏳ 상태 변경 후 30초 대기..."
            sleep 30
          else
            echo "✅ 이미 실행 중 - 대기 생략"
          fi

      - name: Deploy to GCP
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script_stop: true
          envs: |
            IMAGE_TAG=${{ env.IMAGE_TAG }}
            ENV=${{ env.ENV }}
            AWS_REGION=${{ secrets.AWS_REGION }}
            AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}
          script: |
            # 배포 디렉토리로 이동
            cd /home/${{ secrets.SSH_USERNAME }}
            
            # .env 파일 생성 (필요한 경우)
            cat > .env << EOF
            # AWS 설정
            AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID
            AWS_REGION=$AWS_REGION
            IMAGE_TAG=$IMAGE_TAG
            EOF
            
            # AWS ECR 로그인 (ECR 사용하는 경우)
            if [ -n "$AWS_REGION" ] && [ -n "$AWS_ACCOUNT_ID" ]; then
              aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
            fi
            
            # FastAPI 서비스만 재시작 (ChromaDB는 유지)
            docker-compose pull tuning-api  # API 이미지만 pull
            docker-compose stop tuning-api  # API 컨테이너만 중지
            docker-compose rm -f tuning-api  # API 컨테이너만 제거
            docker-compose up -d tuning-api  # API 컨테이너만 다시 시작
            
            # ChromaDB가 실행 중인지 확인하고, 없다면 시작
            if ! docker-compose ps chromadb | grep -q "Up"; then
              echo "ChromaDB가 실행되지 않았습니다. ChromaDB 시작 중..."
              docker-compose up -d chromadb
            fi
            
            # 서비스 상태 확인
            docker-compose ps

      - name: Wait for FastAPI to start
        run: |
          echo "🕒 FastAPI 서버 기동 대기 중..."
          sleep 15

      - name: Health check
        run: |
          echo "🔍 API 서비스 헬스체크 중..."
          for i in {1..15}; do
            if curl -sf http://${{ env.HOST }}:8000/api/v1/health; then
              echo "✅ API 서비스가 정상적으로 시작되었습니다."
              
              # ChromaDB 연결 확인
              echo "🔍 ChromaDB 연결 상태 확인 중..."
              if curl -sf http://${{ env.HOST }}:8000/api/v1/health/chromadb; then
                echo "✅ ChromaDB가 정상적으로 작동 중입니다."
              else
                echo "⚠️ 경고: ChromaDB 연결을 확인할 수 없습니다."
              fi
              exit 0
            fi
            echo "⏱️ API 서비스 준비 대기 중... ($i/15)"
            sleep 10
          done
          
          echo "::error::❌ 헬스체크 실패: API 서비스가 응답하지 않습니다."
          exit 1

      - name: Send success notification
        if: success()
        run: |
          curl -H "Content-Type: application/json" \
              -X POST \
              -d "{\"content\": \"✅ [AI CD 성공] **${{ env.ENV }}** 환경 배포 완료\\n🔖 이미지: ${{ env.FULL_IMAGE }}\\n⚙️ API 서비스만 재시작 (ChromaDB 유지)\"}" \
               ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Send failure notification
        if: failure()
        run: |
          WORKFLOW_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          curl -H "Content-Type: application/json" \
              -X POST \
              -d "{\"content\": \"❌ [AI CD 실패] **${{ env.ENV }}** 환경 배포 실패\\n🔖 이미지: ${{ env.FULL_IMAGE }}\\n⚠️ 원인: API 배포 과정 중 오류 발생\\n🔗 [워크플로우 로그]($WORKFLOW_URL)\"}" \
               ${{ secrets.DISCORD_WEBHOOK_URL }}