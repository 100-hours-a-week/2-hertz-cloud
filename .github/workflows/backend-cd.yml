name: Backend CD (SSH)

on:
  workflow_dispatch:
    inputs:
      rollback:
        description: "롤백 배포를 수행할까요?"
        required: false
        default: "false"
        type: choice
        options:
          - "false"
          - "true"
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Set environment
        run: |
          BRANCH="${{ github.ref_name }}"
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
          echo "ZONE=${{ secrets.GCP_ZONE }}" >> $GITHUB_ENV

          if [[ "$BRANCH" == "main" ]]; then
            echo "ENV=production" >> $GITHUB_ENV
            echo "HOST=${{ secrets.PROD_SERVER_HOST }}" >> $GITHUB_ENV
            echo "INSTANCE=${{ secrets.PROD_INSTANCE }}" >> $GITHUB_ENV
            echo "PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}" >> $GITHUB_ENV
          else
            echo "ENV=stage" >> $GITHUB_ENV
            echo "HOST=${{ secrets.STAGING_SERVER_HOST }}" >> $GITHUB_ENV
            echo "INSTANCE=${{ secrets.STAGING_INSTANCE }}" >> $GITHUB_ENV
            echo "PROJECT_ID=${{ secrets.GCP_PROJECT_ID_STAGING }}" >> $GITHUB_ENV
          fi

          echo "ROLLBACK=${{ github.event.inputs.rollback }}" >> $GITHUB_ENV
          echo "COMMIT_HASH=${{ github.sha }}" >> $GITHUB_ENV

      - name: Set deploy message
        run: |
          if [[ "${{ github.event.inputs.rollback }}" == "true" ]]; then
            echo "DEPLOY_MESSAGE=🚨 [BE 롤백 배포 완료]" >> $GITHUB_ENV
          else
            echo "DEPLOY_MESSAGE=🚀 [BE 배포 완료]" >> $GITHUB_ENV
          fi

      - name: Authenticate to GCP
        if: github.ref_name == 'main'
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Authenticate to GCP (Stage)
        if: github.ref_name != 'main'
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY_STAGING }}

      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v1

      - name: Boot target instance (start/resume with conditional wait)
        run: |
          echo "⚡ 인스턴스 상태 확인 중: $INSTANCE (zone: $ZONE)"
          STATUS=$(gcloud compute instances describe "$INSTANCE" --zone="$ZONE" --format='get(status)')
          echo "🔎 현재 상태: $STATUS"

          if [[ "$STATUS" == "SUSPENDED" ]]; then
            echo "🔄 'resume' 명령 실행"
            gcloud compute instances resume "$INSTANCE" --zone="$ZONE"
            echo "⏳ 상태 변경 후 30초 대기..."
            sleep 30
          elif [[ "$STATUS" == "TERMINATED" ]]; then
            echo "🔄 'start' 명령 실행"
            gcloud compute instances start "$INSTANCE" --zone="$ZONE"
            echo "⏳ 상태 변경 후 30초 대기..."
            sleep 30
          else
            echo "✅ 이미 실행 중 - 대기 생략"
          fi

      - name: Deploy via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /home/deploy
            chmod +x be_deploy.sh
            if [[ "${{ env.ROLLBACK }}" == "true" ]]; then
              ./be_deploy.sh --rollback
            else
              ./be_deploy.sh
            fi

      - name: Wait for Spring Boot to start
        run: |
          echo "🕒 Spring Boot 서버 기동 대기 중..."
          sleep 15

      - name: Health check with retries
        run: |
          echo "🔍 헬스체크 시작: 최대 3회 시도합니다."

          if [[ "${{ env.BRANCH }}" == "main" ]]; then
            CHECK_URL="https://hertz-tuning.com/api/ping"
          else
            CHECK_URL="http://${{ env.HOST }}:8080/api/ping"
          fi

          for i in {1..3}; do
            echo "⏱️ 시도 $i: $CHECK_URL"
            if curl -sf "$CHECK_URL"; then
              echo "✅ 헬스체크 성공 🎉"
              exit 0
            else
              echo "::error::헬스체크 시도 $i 실패"
              sleep 15
            fi
          done

          echo "::error::❌ 3회 헬스체크 실패 - 서버가 정상 기동되지 않음"
          exit 1

      - name: Send success notification
        if: success()
        run: |
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{\"content\": \"${{ env.DEPLOY_MESSAGE }} **${{ env.ENV }}** Backend 서버 (브랜치: \`${{ env.BRANCH }}\`)\\n🔖 Commit: ${{ env.COMMIT_HASH }}\"}" \
               ${{ secrets.DISCORD_WEBHOOK_CICD_URL }}

      - name: Send failure notification
        if: failure()
        run: |
          curl -H "Content-Type: application/json" \
              -X POST \
              -d "{\"content\": \"❌ [BE 배포 실패] **${{ env.ENV }}** AI 서버 (브랜치: \`${{ env.BRANCH }}\`)\\n🔖 Commit: ${{ env.COMMIT_HASH }}\\n⚠️ 원인: 워크플로우 실행 중 오류 발생\"}" \
              ${{ secrets.DISCORD_WEBHOOK_CICD_URL }}
