name: Backend CD (SSH)

on:
  workflow_dispatch:
    inputs:
      rollback:
        description: '롤백 배포를 수행할까요?'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  ZONE: ${{ secrets.GCP_ZONE }}
  STAGING_INSTANCE: ${{ secrets.STAGING_INSTANCE }}
  PROD_INSTANCE: ${{ secrets.PROD_INSTANCE }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Set environment
        run: |
          BRANCH="${{ github.ref_name }}"
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV

          if [[ "$BRANCH" == "main" ]]; then
            echo "ENV=production" >> $GITHUB_ENV
            echo "HOST=${{ secrets.PROD_SERVER_HOST }}" >> $GITHUB_ENV
            echo "INSTANCE=${{ env.PROD_INSTANCE }}" >> $GITHUB_ENV
          else
            echo "ENV=staging" >> $GITHUB_ENV
            echo "HOST=${{ secrets.STAGING_SERVER_HOST }}" >> $GITHUB_ENV
            echo "INSTANCE=${{ env.STAGING_INSTANCE }}" >> $GITHUB_ENV
          fi

          echo "ROLLBACK=${{ github.event.inputs.rollback }}" >> $GITHUB_ENV
          echo "COMMIT_HASH=${{ github.sha }}" >> $GITHUB_ENV

      - name: Set deploy message
        run: |
          if [[ "${{ github.event.inputs.rollback }}" == "true" ]]; then
            echo "DEPLOY_MESSAGE=🚨 롤백 배포 완료" >> $GITHUB_ENV
          else
            echo "DEPLOY_MESSAGE=🚀 배포 완료" >> $GITHUB_ENV
          fi

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v1

      - name: Boot target instance (start or resume)
        run: |
          echo "⚡ 인스턴스 상태 확인 중: $INSTANCE (zone: $ZONE)"
          STATUS=$(gcloud compute instances describe "$INSTANCE" --zone="$ZONE" --format='get(status)')
          echo "🔎 현재 상태: $STATUS"

          if [[ "$STATUS" == "SUSPENDED" ]]; then
            echo "🔄 'resume' 명령 실행"
            gcloud compute instances resume "$INSTANCE" --zone="$ZONE"
          elif [[ "$STATUS" == "TERMINATED" ]]; then
            echo "🔄 'start' 명령 실행"
            gcloud compute instances start "$INSTANCE" --zone="$ZONE"
          else
            echo "✅ 이미 실행 중 또는 시작 불필요: 상태=$STATUS"
          fi

      - name: Wait for instance to boot
        run: sleep 30

      - name: Deploy via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /home/deploy
            chmod +x be_deploy.sh
            if [[ "${{ env.ROLLBACK }}" == "true" ]]; then
              ./be_deploy.sh --rollback
            else
              ./be_deploy.sh
            fi

      - name: Wait for Spring Boot to start
        run: |
          echo "🕒 Spring Boot 서버 기동 대기 중..."
          sleep 15

      - name: Health check with retries
        run: |
          echo "🔍 헬스체크 시작: 최대 3회 시도합니다."
          for i in {1..3}; do
            echo "⏱️ 시도 $i: https://hertz-tuning.com/api/ping"
            if curl -sf https://hertz-tuning.com/api/ping; then
              echo "✅ 헬스체크 성공 🎉"
              exit 0
            else
              echo "⚠️ 헬스체크 실패. 15초 후 재시도..."
              sleep 15
            fi
          done

          echo "❌ 3회 헬스체크 실패 - 서버가 정상 기동되지 않음"
          exit 1

      - name: Send notification
        if: success()
        run: |
            curl -H "Content-Type: application/json" \
                 -X POST \
                 -d "{\"username\": \"CD Bot\", \"content\": \"${{ env.ENV }} Spring Boot ${{ env.DEPLOY_MESSAGE }} - 브랜치: ${{ env.BRANCH }}\\n🔖 커밋: ${{ env.COMMIT_HASH }}\"}" \
                 ${{ secrets.DISCORD_WEBHOOK_URL }}