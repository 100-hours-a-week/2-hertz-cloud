name: Deploy AI (SSH)

on:
  workflow_dispatch:
    inputs:
      rollback:
        description: "롤백 배포를 수행할까요?"
        required: false
        default: "false"
        type: choice
        options:
          - "false"
          - "true"
      deploy_type:
        description: "배포 방식을 선택하세요 (docker-compose or pm2)"
        required: true
        default: "docker"
        type: choice
        options:
          - "docker"
          - "pm2"
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Set environment
        run: |
          BRANCH="${{ github.ref_name }}"
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
        

          if [[ "$BRANCH" == "main" ]]; then
            echo "ENV=production" >> $GITHUB_ENV
            echo "HOST=${{ secrets.PROD_GCP_HOST_AI }}" >> $GITHUB_ENV
            echo "INSTANCE=${{ secrets.PROD_GCP_INSTANCE_AI }}" >> $GITHUB_ENV
            echo "PROJECT_ID=${{ secrets.PROD_GCP_PROJECT_ID }}" >> $GITHUB_ENV
            echo "ZONE=${{ secrets.PROD_GCP_ZONE_AI }}" >> $GITHUB_ENV

          else
            echo "ENV=stage" >> $GITHUB_ENV
            echo "HOST=${{ secrets.DEV_GCP_HOST_AI }}" >> $GITHUB_ENV
            echo "INSTANCE=${{ secrets.DEV_GCP_INSTANCE_AI }}" >> $GITHUB_ENV
            echo "PROJECT_ID=${{ secrets.DEV_GCP_PROJECT_ID }}" >> $GITHUB_ENV
            echo "ZONE=${{ secrets.DEV_GCP_ZONE_AI }}" >> $GITHUB_ENV
          fi

          echo "ROLLBACK=${{ github.event.inputs.rollback }}" >> $GITHUB_ENV
          echo "COMMIT_HASH=${{ github.sha }}" >> $GITHUB_ENV
          echo "DEPLOY_TYPE=${{ github.event.inputs.deploy_type }}" >> $GITHUB_ENV

      - name: Set deploy message
        run: |
          if [[ "${{ github.event.inputs.rollback }}" == "true" ]]; then
            echo "DEPLOY_MESSAGE=🚨 [AI 롤백 배포 완료]" >> $GITHUB_ENV
          else
            echo "DEPLOY_MESSAGE=🤖 [AI 배포 완료]" >> $GITHUB_ENV
          fi

      - name: Authenticate to GCP
        if: github.ref_name == 'main'
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.PROD_GCP_SA_KEY }}

      - name: Authenticate to GCP (Stage)
        if: github.ref_name != 'main'
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.DEV_GCP_SA_KEY }}

      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v1

      - name: Boot target instance (start/resume with conditional wait)
        run: |
          echo "⚡ 인스턴스 상태 확인 중: $INSTANCE (zone: $ZONE)"
          STATUS=$(gcloud compute instances describe "$INSTANCE" --zone="$ZONE" --format='get(status)')
          echo "🔎 현재 상태: $STATUS"

          if [[ "$STATUS" == "SUSPENDED" ]]; then
            echo "🔄 'resume' 명령 실행"
            gcloud compute instances resume "$INSTANCE" --zone="$ZONE"
            echo "⏳ 상태 변경 후 30초 대기..."
            sleep 30
          elif [[ "$STATUS" == "TERMINATED" ]]; then
            echo "🔄 'start' 명령 실행"
            gcloud compute instances start "$INSTANCE" --zone="$ZONE"
            echo "⏳ 상태 변경 후 30초 대기..."
            sleep 30
          else
            echo "✅ 이미 실행 중 - 대기 생략"
          fi

      - name: Deploy via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
        
          script: |
            if [[ "${{ env.DEPLOY_TYPE }}" == "docker" ]]; then
              echo "🚀 Docker 배포 시작..."
              cd /home/deploy
              pm2 stop fastapi-ai

              docker compose -f docker-compose-tuning.yml --env-file=.env up -d --build
            else
              echo "🚀 PM2 배포 시작..."
              cd /home/deploy
              docker stop tuning
              pm2 restart ecosystem.config.js 
              chmod +x ai_deploy.sh
              if [[ "${{ env.ROLLBACK }}" == "true" ]]; then
                ./ai_deploy.sh --rollback
              else
                ./ai_deploy.sh
              fi
            fi
           

      - name: Wait for FastAPI to start
        run: |
          echo "🕒 FastAPI 서버 기동 대기 중..."
          sleep 15

      - name: Health check AI server
        run: |
          echo "🔍 AI 서버 헬스체크 시작 (FastAPI Swagger docs)... 최대 3회 시도합니다."
          for i in {1..3}; do
            echo "⏱️ 시도 $i: http://${{ env.HOST }}:8000/api/v1/health/chromadb"
            if curl -sf http://${{ env.HOST }}:8000/api/v1/health/chromadb; then
              echo "✅ 헬스체크 성공 🎉"
              exit 0
            else
              echo "⚠️ 헬스체크 실패. 15초 후 재시도..."
              sleep 15
            fi
          done

          echo "❌ 3회 헬스체크 실패 - AI 서버가 정상 기동되지 않음"
          exit 1

      - name: Send success notification
        if: success()
        run: |
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{\"content\": \"${{ env.DEPLOY_MESSAGE }} **${{ env.ENV }}** AI 서버 (브랜치: \`${{ env.BRANCH }}\`)\\n🔖 Commit: ${{ env.COMMIT_HASH }}\"}" \
               ${{ secrets.DISCORD_WEBHOOK_CICD_URL }}

      - name: Send failure notification
        if: failure()
        run: |
          WORKFLOW_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{\"content\": \"❌ [AI 배포 실패] **${{ env.ENV }}** AI 서버 (브랜치: \`${{ env.BRANCH }}\`)\\n🔖 Commit: ${{ env.COMMIT_HASH }}\\n⚠️ [워크플로우 로그 보기]($WORKFLOW_URL)\"}" \
               ${{ secrets.DISCORD_WEBHOOK_CICD_URL }}