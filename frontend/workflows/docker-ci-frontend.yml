name: Frontend Docker CI

on:
  pull_request:
    types: [closed]
    branches:
      - main
      - develop

jobs:
  build:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      # 1. 소스 코드 Checkout
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # 2. Node.js 설정
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # 3. 의존성 설치
      - name: Install dependencies
        run: npm ci

      # 4. Lint 실행
      - name: Run lint
        run: npm run lint

      # 5. TypeScript 컴파일 체크
      - name: TypeScript compile check
        run: npx tsc --noEmit

      # 6. 빌드 테스트
      - name: Build test
        run: npm run build
        env:
          NEXT_PUBLIC_API_BASE_URL: ${{ secrets.API_BASE_URL_TEST }}
          NEXT_PUBLIC_WS_URL: ${{ secrets.WS_URL_TEST }}

      # 7. AWS 자격증명 설정
      - name: Configure AWS credentials
        if: success()
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 8. ECR 로그인
      - name: Login to Amazon ECR
        if: success()
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # 9. 태그 정보 생성
      - name: Generate image tags
        if: success()
        id: generate-tags
        run: |
          BRANCH=${{ github.base_ref }}
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          IMAGE_TAG="${BRANCH}-${SHORT_SHA}"

          if [ "$BRANCH" = "main" ]; then
            ENV_TAG="main-latest"
          else
            ENV_TAG="develop-latest"
          fi

          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "ENV_TAG=$ENV_TAG" >> $GITHUB_ENV

      # 10. Docker 빌드 및 푸시
      - name: Build and push Docker image
        if: success()
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          REPOSITORY=hertz-fe

          echo "🏗️ Docker 이미지 빌드 시작..."

          # 빌드 시 환경변수 주입
          if [ "${{ env.BRANCH }}" = "main" ]; then
            NEXT_PUBLIC_API_BASE_URL=${{ secrets.PROD_API_BASE_URL }}
            NEXT_PUBLIC_WS_URL=${{ secrets.PROD_WS_URL }}
          else
            NEXT_PUBLIC_API_BASE_URL=${{ secrets.DEV_API_BASE_URL }}
            NEXT_PUBLIC_WS_URL=${{ secrets.DEV_WS_URL }}
          fi

          docker build \
            --build-arg NEXT_PUBLIC_API_BASE_URL=$NEXT_PUBLIC_API_BASE_URL \
            --build-arg NEXT_PUBLIC_WS_URL=$NEXT_PUBLIC_WS_URL \
            -t $ECR_REGISTRY/$REPOSITORY:${{ env.IMAGE_TAG }} \
            -f Dockerfile \
            .

          docker tag $ECR_REGISTRY/$REPOSITORY:${{ env.IMAGE_TAG }} $ECR_REGISTRY/$REPOSITORY:${{ env.ENV_TAG }}

          echo "📤 Docker 이미지 푸시 중..."
          docker push $ECR_REGISTRY/$REPOSITORY:${{ env.IMAGE_TAG }}
          docker push $ECR_REGISTRY/$REPOSITORY:${{ env.ENV_TAG }}

          echo "FULL_IMAGE=$ECR_REGISTRY/$REPOSITORY:${{ env.IMAGE_TAG }}" >> $GITHUB_ENV

      # 11. 성공 알림
      - name: Notify Discord on Success
        if: success()
        run: |
          curl -H "Content-Type: application/json" \
              -X POST \
              -d "{\"username\": \"Frontend CI\", \"content\": \"✅ [프론트엔드 CI 성공] **${{ env.BRANCH }}** 브랜치\\n🔖 태그: ${{ env.IMAGE_TAG }}\\n🆔 Commit: ${{ env.SHORT_SHA }}\\n📦 이미지: ${{ env.FULL_IMAGE }}\"}" \
              ${{ secrets.DISCORD_WEBHOOK_URL }}

      # 12. 실패 알림
      - name: Notify Discord on Failure
        if: failure()
        run: |
          WORKFLOW_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          curl -H "Content-Type: application/json" \
              -X POST \
              -d "{\"username\": \"Frontend CI\", \"content\": \"❌ [프론트엔드 CI 실패] **${{ env.BRANCH }}** 브랜치\\n🔖 Commit: ${{ env.SHORT_SHA }}\\n⚠️ [워크플로우 로그 보기]($WORKFLOW_URL)\"}" \
              ${{ secrets.DISCORD_WEBHOOK_URL }}